Description: "AWS Cloudformation example to deploy a high availability web app."
Parameters:
    CIDRvpc:
      Description: CIDR Network for VPC
      Type: String
      Default: 10.1.0.0/16
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    ProjectName:
      Description: Project Name
      Type: String
      Default: IAC-Udacity
    CIDRPrivateSubnet1:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.0.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    CIDRPrivateSubnet2:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.1.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    CIDRPublicSubnet1:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.20.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    CIDRPublicSubnet2:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.21.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    AccessKey:
      Description: Defines the private key to connect to instances
      Type: AWS::EC2::KeyPair::KeyName
Resources:
    WEBvpc:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: !Ref CIDRvpc
        Tags: 
          - Key: Project
            Value: !Ref ProjectName
    
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties: 
        Tags:
          - Key: Project
            Value: !Ref ProjectName
      DependsOn: WEBvpc
    
    InternetGatewayAttach:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref WEBvpc
      DependsOn: InternetGateway
    
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 0
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPrivateSubnet1
        MapPublicIpOnLaunch: false
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 1
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPrivateSubnet2
        MapPublicIpOnLaunch: false
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 0
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPublicSubnet1
        MapPublicIpOnLaunch: true
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 1
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPublicSubnet2
        MapPublicIpOnLaunch: true
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    InstancesSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to internal instances
        VpcId: !Ref WEBvpc
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      DependsOn: WEBvpc

    LoadBalancerWeb:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties: 
        Name: web-loadbalancer
        IpAddressType: ipv4
        Scheme: internet-facing
        Subnets: 
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        Type: application
      DependsOn: 
        - PublicSubnet1
        - PublicSubnet2
        - InternetGatewayAttach

    WebTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        Name: web-target-group
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 5
        UnhealthyThresholdCount: 2
        Matcher: 
          HttpCode: 200
        Port: 80
        Protocol: HTTP
        TargetType: instance
        VpcId: !Ref WEBvpc
      DependsOn: LoadBalancerWeb

    WebListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties: 
        DefaultActions: 
          - Type: forward
            TargetGroupArn: !Ref WebTargetGroup
        LoadBalancerArn: !Ref LoadBalancerWeb
        Port: 80
        Protocol: HTTP
      DependsOn:
        - LoadBalancerWeb
        - WebTargetGroup

    WebServersLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties: 
        AssociatePublicIpAddress: false
        BlockDeviceMappings: 
          - DeviceName: "/dev/sda1"
            Ebs: 
              VolumeSize: "15"
              VolumeType: "io1"
              Iops: 200
        EbsOptimized: false
        ImageId: ami-003634241a8fcdec0
        InstanceMonitoring: false
        InstanceType: t2.micro
        KeyName: !Ref AccessKey
        IamInstanceProfile: !Ref WebServerInstanceProfile
        SecurityGroups: 
          - !Ref InstancesSecurityGroup
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://udacity-demo-1/udacity.zip .
              unzip -o udacity.zip
      DependsOn: 
        - WebServerInstanceProfile

    WebServerInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        InstanceProfileName: WebServerInstaceProfile
        Roles: 
          - !Ref S3IamRoleInstances
      DependsOn: S3IamRoleInstances

    S3IamRoleInstances:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: S3WebServerRole
        Description: S3 Read Only Access for web server instances
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
