Description: "AWS Cloudformation example to deploy a high availability web app."
Parameters:
    CIDRvpc:
      Description: CIDR Network for VPC
      Type: String
      Default: 10.1.0.0/16
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    ProjectName:
      Description: Project Name
      Type: String
      Default: IAC-Udacity
    CIDRPrivateSubnet1:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.0.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    CIDRPrivateSubnet2:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.1.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    CIDRPublicSubnet1:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.20.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    CIDRPublicSubnet2:
      Description: CIDR Network for PrivateSubnet1
      Type: String
      Default: 10.1.21.0/24
      AllowedPattern: (\d{1,3}\.){3}\d{1,3}\/\d{2}
    AccessKey:
      Description: Defines the private key to connect to instances
      Type: AWS::EC2::KeyPair::KeyName
Mappings:
    RegionMap: 
      us-east-1: 
        default: ami-085925f297f89fce1
      us-east-2: 
        default: ami-07c1207a9d40bc3bd
      us-west-1: 
        default: ami-0f56279347d2fa43e
      us-west-2: 
        default: ami-003634241a8fcdec0
Resources:
    WEBvpc:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: !Ref CIDRvpc
        Tags: 
          - Key: Project
            Value: !Ref ProjectName
    
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties: 
        Tags:
          - Key: Project
            Value: !Ref ProjectName
      DependsOn: WEBvpc
    
    InternetGatewayAttach:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref WEBvpc
      DependsOn: InternetGateway
    
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 0
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPrivateSubnet1
        MapPublicIpOnLaunch: false
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 1
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPrivateSubnet2
        MapPublicIpOnLaunch: false
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 0
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPublicSubnet1
        MapPublicIpOnLaunch: true
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select
          - 1
          - !GetAZs
            Ref: 'AWS::Region'
        CidrBlock: !Ref CIDRPublicSubnet2
        MapPublicIpOnLaunch: true
        VpcId: !Ref WEBvpc
      DependsOn: WEBvpc
    
    EIPNatGateway:
      Type: AWS::EC2::EIP
      Properties: 
        Domain: !Ref WEBvpc
    
    WebNatGateway:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt EIPNatGateway.AllocationId
        SubnetId: !Ref PublicSubnet1
      DependsOn: PublicSubnet1

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref WEBvpc

    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref WebNatGateway
      DependsOn:
        - PrivateRouteTable
        - WebNatGateway

    PrivateSubnetAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref PrivateSubnet1
      DependsOn: 
        - PrivateSubnet1
        - PrivateRouteTable
    
    PrivateSubnetAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref PrivateSubnet2
      DependsOn: 
        - PrivateSubnet2
        - PrivateRouteTable

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref WEBvpc

    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
      DependsOn:
        - PublicRouteTable
        - InternetGatewayAttach

    PublicSubnetAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1
      DependsOn: 
        - PublicSubnet1
        - PublicRouteTable
    
    PublicSubnetAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
      DependsOn: 
        - PublicSubnet2
        - PublicRouteTable
    
    InstancesSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to internal instances
        VpcId: !Ref WEBvpc
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      DependsOn: WEBvpc

    LBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to LB
        VpcId: !Ref WEBvpc
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      DependsOn: WEBvpc

    BastionSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow ssh to Bastion
        VpcId: !Ref WEBvpc
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      DependsOn: WEBvpc

    LoadBalancerWeb:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties: 
        Name: web-loadbalancer
        IpAddressType: ipv4
        Scheme: internet-facing
        SecurityGroups:
          - !Ref LBSecurityGroup 
        Subnets: 
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        Type: application
      DependsOn: 
        - PublicSubnet1
        - PublicSubnet2
        - InternetGatewayAttach

    WebTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        Name: web-target-group
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 10
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 3
        HealthyThresholdCount: 3
        UnhealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        TargetType: instance
        VpcId: !Ref WEBvpc
      DependsOn: LoadBalancerWeb

    WebListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties: 
        DefaultActions: 
          - Type: forward
            TargetGroupArn: !Ref WebTargetGroup
        LoadBalancerArn: !Ref LoadBalancerWeb
        Port: 80
        Protocol: HTTP
      DependsOn:
        - WebTargetGroup

    WebListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref WebListener
        Priority: 1
      DependsOn: WebListener

    WebServersLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties: 
        AssociatePublicIpAddress: false
        BlockDeviceMappings: 
          - DeviceName: "/dev/sda1"
            Ebs: 
              VolumeSize: "15"
              VolumeType: "io1"
              Iops: 200
        EbsOptimized: false
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", default]
        InstanceMonitoring: false
        InstanceType: t3.small
        IamInstanceProfile: !Ref WebServerInstanceProfile
        SecurityGroups: 
          - !Ref InstancesSecurityGroup
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://udacity-demo-1/udacity.zip .
              unzip -o udacity.zip
      DependsOn: 
        - WebServerInstanceProfile

    WebServerInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        InstanceProfileName: WebServerProfile
        Roles: 
          - !Ref S3IamRoleInstances
      DependsOn: S3IamRoleInstances

    S3IamRoleInstances:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: S3WebServerRole
        Description: S3 Read Only Access for web server instances
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

    WebAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties: 
        AutoScalingGroupName: web-autoscaling
        VPCZoneIdentifier:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        DesiredCapacity: 4
        HealthCheckGracePeriod: 300
        HealthCheckType: ELB
        LaunchConfigurationName: !Ref WebServersLaunchConfiguration
        MaxSize: 4
        MinSize: 4
        TargetGroupARNs: 
          - !Ref WebTargetGroup
      DependsOn:
        - WebServersLaunchConfiguration
        - PrivateSubnetAssociation1
        - PrivateSubnetAssociation2
        - PublicSubnetAssociation1
        - PublicSubnetAssociation2

    BastionInstance: 
      Type: AWS::EC2::Instance
      Properties: 
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", default]
        KeyName: !Ref AccessKey
        InstanceType: t3.small
        NetworkInterfaces:
          - GroupSet:
            - !Ref BastionSecurityGroup
            AssociatePublicIpAddress: 'true'
            DeviceIndex: '0'
            DeleteOnTermination: 'true'
            SubnetId: !Ref PublicSubnet1
      DependsOn:
        - PublicSubnet1
        - InternetGatewayAttach

Outputs:
    WebAccess:
      Description: URL to access the Udagram Project
      Value: !Join
        - ''
        - - 'http://' 
          - !GetAtt LoadBalancerWeb.DNSName
    BastionHost:
      Description: Public IP of the BastionHost
      Value: !GetAtt BastionInstance.PublicIp
